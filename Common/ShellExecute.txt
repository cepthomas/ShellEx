

https://medium.com/@matterpreter/offensive-p-invoke-leveraging-the-win32-api-from-managed-code-7eef4fdef16d

https://learn.microsoft.com/en-us/windows/win32/api/shellapi/nf-shellapi-shellexecuteexa


================================================

ShellExecute (shell32)
 
Performs an operation on a specified file.

[DllImport("Shell32.dll", CharSet = CharSet.Auto, SetLastError = true)]
static extern IntPtr ShellExecute(IntPtr hwnd, string lpOperation, string lpFile, string lpParameters, string lpDirectory, int nShowCmd);

Sample Code:
//Opens a URL in the default browser
IntPtr result = ShellExecute(IntPtr.Zero, "open", "http://www.google.com", null, null, 1);


================================================

ShellExecuteEx (shell32)
 
The ShellExecuteEx API

[DllImport("shell32.dll", CharSet = CharSet.Auto)]
static extern bool ShellExecuteEx(ref SHELLEXECUTEINFO lpExecInfo);

User-Defined Types:

[StructLayout(LayoutKind.Sequential)]
public struct SHELLEXECUTEINFO
{
    public int cbSize;
    public uint fMask;
    public IntPtr hwnd;
    [MarshalAs(UnmanagedType.LPTStr)]
    public string lpVerb;
    [MarshalAs(UnmanagedType.LPTStr)]
    public string lpFile;
    [MarshalAs(UnmanagedType.LPTStr)]
    public string lpParameters;
    [MarshalAs(UnmanagedType.LPTStr)]
    public string lpDirectory;
    public int nShow;
    public IntPtr hInstApp;
    public IntPtr lpIDList;
    [MarshalAs(UnmanagedType.LPTStr)]
    public string lpClass;
    public IntPtr hkeyClass;
    public uint dwHotKey;
    public IntPtr hIcon;
    public IntPtr hProcess;
}

public enum ShowCommands : int
{
    SW_HIDE = 0,
    SW_SHOWNORMAL = 1,
    SW_NORMAL = 1,
    SW_SHOWMINIMIZED = 2,
    SW_SHOWMAXIMIZED = 3,
    SW_MAXIMIZE = 3,
    SW_SHOWNOACTIVATE = 4,
    SW_SHOW = 5,
    SW_MINIMIZE = 6,
    SW_SHOWMINNOACTIVE = 7,
    SW_SHOWNA = 8,
    SW_RESTORE = 9,
    SW_SHOWDEFAULT = 10,
    SW_FORCEMINIMIZE = 11,
    SW_MAX = 11
}

[Flags]
public enum ShellExecuteMaskFlags : uint
{
    SEE_MASK_DEFAULT = 0x00000000,
    SEE_MASK_CLASSNAME = 0x00000001,  
    SEE_MASK_CLASSKEY = 0x00000003,  
    SEE_MASK_IDLIST = 0x00000004,  
    SEE_MASK_INVOKEIDLIST = 0x0000000c,   // Note SEE_MASK_INVOKEIDLIST(0xC) implies SEE_MASK_IDLIST(0x04)
    SEE_MASK_HOTKEY = 0x00000020,  
    SEE_MASK_NOCLOSEPROCESS = 0x00000040,
    SEE_MASK_CONNECTNETDRV = 0x00000080,  
    SEE_MASK_NOASYNC = 0x00000100,  
    SEE_MASK_FLAG_DDEWAIT = SEE_MASK_NOASYNC,
    SEE_MASK_DOENVSUBST = 0x00000200,  
    SEE_MASK_FLAG_NO_UI = 0x00000400,  
    SEE_MASK_UNICODE = 0x00004000,
    SEE_MASK_NO_CONSOLE = 0x00008000,
    SEE_MASK_ASYNCOK = 0x00100000,
    SEE_MASK_HMONITOR = 0x00200000,  
    SEE_MASK_NOZONECHECKS = 0x00800000,
    SEE_MASK_NOQUERYCLASSSTORE = 0x01000000,
    SEE_MASK_WAITFORINPUTIDLE = 0x02000000,
    SEE_MASK_FLAG_LOG_USAGE = 0x04000000,
}

Verbs for lpVerb:
"open"          - Opens a file or a application
"openas"        - Opens dialog when no program is associated to the extension
"opennew"       - see MSDN
"runas"         - In Windows 7 and Vista, opens the UAC dialog and in others, open the Run as... Dialog
"null"          - Specifies that the operation is the default for the selected file type.
"edit"          - Opens the default text editor for the file.    
"explore"       - Opens the Windows Explorer in the folder specified in lpDirectory.
"properties"    - Opens the properties window of the file.
"copy"          - see MSDN
"cut"           - see MSDN
"paste"         - see MSDN
"pastelink"     - pastes a shortcut
"delete"        - see MSDN
"print"         - Start printing the file with the default application.
"printto"       - see MSDN
"find"          - Start a search


Notes:
- Check the SW constants at to see what value to pass in the nShow member. Typically you'll pass SW_SHOW.
- Be careful with the string structure fields: UnmanagedType.LPTStr will be marshalled as unicode string so only
  the first character will be recognized by the function. Use UnmanagedType.LPStr instead. [Tested on Win7]
- lpVerb member can be used for a varity of actions like "properties", "find", "openas", "print"..etc depending
  on the file type you're dealing with. Actions available for a specific file type are stored in registry,
  setting lpVerb to null results in the default action of that file type to be executed.
- Someone previously thought "the truth is in the headers - in this case ShellAPI.h, which declares them all as
  LPCSTR i.e. they're always ANSI not Unicode. On the contrary, shellapi.h defines two versions of the structure,
  SHELLEXECUTEINFOA and SHELLEXECUTEINFOW, and ShellExecuteExW expects a SHELLEXECUTEINFOW structure. So
  although "LPCTSTR" never appears in the definition the effect is the same.


C# Example of Property Dialog
private const int SW_SHOW = 5;
private const uint SEE_MASK_INVOKEIDLIST = 12;

[DllImport("shell32.dll")]
static extern bool ShellExecuteEx(ref SHELLEXECUTEINFO lpExecInfo);

public static void ShowFileProperties(string Filename)
{
    SHELLEXECUTEINFO info = new SHELLEXECUTEINFO();
    info.cbSize = System.Runtime.InteropServices.Marshal.SizeOf(info);
    info.lpVerb = "properties";
    info.lpFile = Filename;
    info.nShow = SW_SHOW;
    info.fMask = SEE_MASK_INVOKEIDLIST;
    ShellExecuteEx(ref info);
}
