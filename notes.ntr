
# Top

- C:\Program Files (x86)\Windows Kits\10\Include\10.0.22621.0\um\WinUser.h

- publishing and packaging: https://stackoverflow.com/questions/58994946/how-to-build-app-without-app-runtimeconfig-json


https://learn.microsoft.com/en-us/windows/win32/shell/shell-exts


- eventually delete Splunk.zip and Ui.zip. And this file.



=================================================================

// Create [Directory\shell\cmder]  MUIVerb=Commander
// Create [Directory\shell\cmder\command]  @="C:\Dev\Apps\Shellinator\Ui\bin\x64\Debug\net8.0-windows\Shellinator.exe" cmder "%D"
// Create [Directory\shell\tree]  MUIVerb=Tree
// Create [Directory\shell\tree\command]  @="C:\Dev\Apps\Shellinator\Ui\bin\x64\Debug\net8.0-windows\Shellinator.exe" tree "%D"
// Create [Directory\shell\openst]  MUIVerb=Open in Sublime
// Create [Directory\shell\openst\command]  @="C:\Program Files\Sublime Text\subl" --launch-or-new-window "%D"
// Create [Directory\shell\findev]  MUIVerb=Find in Everything
// Create [Directory\shell\findev\command]  @=C:\Program Files\Everything\everything -parent "%D"
// Create [Directory\Background\shell\tree]  MUIVerb=Tree
// Create [Directory\Background\shell\tree\command]  @="C:\Dev\Apps\Shellinator\Ui\bin\x64\Debug\net8.0-windows\Shellinator.exe" tree "%W"
// Create [Directory\Background\shell\openst]  MUIVerb=Open in Sublime
// Create [Directory\Background\shell\openst\command]  @="C:\Program Files\Sublime Text\subl" --launch-or-new-window "%W"
// Create [Directory\Background\shell\findev]  MUIVerb=Find in Everything
// Create [Directory\Background\shell\findev\command]  @=C:\Program Files\Everything\everything -parent "%W"
// Create [*\shell\exec]  MUIVerb=Execute
// Create [*\shell\exec\command]  @="C:\Dev\Apps\Shellinator\Ui\bin\x64\Debug\net8.0-windows\Shellinator.exe" exec "%D"
// Create [DesktopBackground\shell\test_deskbg]  MUIVerb=!! Test DeskBg
// Create [DesktopBackground\shell\test_deskbg\command]  @="C:\Dev\Apps\Shellinator\Ui\bin\x64\Debug\net8.0-windows\Shellinator.exe" test_deskbg "%W"
// Create [Folder\shell\test_folder]  MUIVerb=!! Test Folder
// Create [Folder\shell\test_folder\command]  @="C:\Dev\Apps\Shellinator\Ui\bin\x64\Debug\net8.0-windows\Shellinator.exe" test_folder "%D"


// Delete [Directory\shell\cmder]
// Delete [Directory\shell\tree]
// Delete [Directory\shell\openst]
// Delete [Directory\shell\findev]
// Delete [Directory\Background\shell\tree]
// Delete [Directory\Background\shell\openst]
// Delete [Directory\Background\shell\findev]
// Delete [*\shell\exec]
// Delete [DesktopBackground\shell\test_deskbg]
// Delete [Folder\shell\test_folder]





=================================================================

# Explorer
keyboard shortcuts(incl explorer) :
https://support.microsoft.com/en-us/windows/keyboard-shortcuts-in-windows-dcc61a57-8ff0-cffe-9796-cb9706c75eec

# powershell
https://learn.microsoft.com/en-us/powershell/?view=powershell-7.2
https://ss64.com/ps/powershell.html
open a new explorer instance:
powershell.exe -command Invoke-Item C:\Temp -> not
Easy enough from PowerShell using the shell.application com object.

HKEY_LOCAL_MACHINE\SOFTWARE\Classes\Directory\background\shell\Powershell\command:
powershell.exe -noexit -command Set-Location -literalPath '%V'



https://www.geoffchappell.com/studies/windows/shell/explorer/index.htm?tx=28
A typical occasion is when a shell namespace object is to be opened by calling the
SHELL32 function ShellExecuteEx and the database of file associations names EXPLORER.EXE
as the program to run for applying the requested verb to the object.

A typical occasion is when a shell namespace object is to be opened by calling the SHELL32 function
ShellExecuteEx and the database of file associations names EXPLORER.EXE as the program to run for applying
the requested verb to the object.

# The Windows Explorer Command Line
The EXPLORER command line is a sequence of fields with commas and equals signs serving as separators.To allow commas
and equals signs within a field, there is a facility for enclosure by double-quotes.The double-quotes are otherwise
ignored, except that two consecutive double-quotes in the command line pass into the extracted field as one
literal double-quote.White space is ignored at the start and end of each field.

Each argument for EXPLORER is one or more fields, shown below as if separated only by commas and without the complications
of white space or quoting.Where the first field is a command-line switch, necessarily beginning with the forward
slash, it is case-insensitive.

/e
/idlist,:handle:process
    specifies object as ITEMIDLIST in shared memory block with given handle in context of given process

/n
    redundant in Windows Vista
/root,/idlist,:handle:process
/root,clsid
/root,clsid,path
/root,path
    specifies object as root

/select
    show object as selected item in parent folder

/separate
    show in separate EXPLORER process

path
    specifies object;
    ignored if object already specified;
    overridden by specification in later /idlist or /root argument


The overall aim of the command line is to specify a shell namespace object and a way in which EXPLORER is to
show that object.



https://learn.microsoft.com/en-us/windows/win32/shell/launch

=========================================================================

////////////////////////////////////////////////////////////
// Run using direct shell command.
// case "tree": // direct => cmd /c /q tree /a /f "%V" | clip
// still flashes, ? Try ShellExecuteEx, setting nShow=SW_HIDE. https://learn.microsoft.com/en-us/windows/win32/shell/launch
//cmd /B tree /a /f "C:\Dev\SplunkStuff\test_dir" | clip

NM.ShellExecuteInfo info = new();
info.cbSize = System.Runtime.InteropServices.Marshal.SizeOf(info);
info.lpVerb = "open";
//info.lpFile = "cmd";
//info.lpParameters = "/B tree /a /f \"C:\\Dev\\SplunkStuff\\test_dir\" | clip";
info.lpFile = "cmd.exe";
//info.lpParameters = "tree /a /f \"C:\\Dev\\SplunkStuff\\test_dir\" | clip";
//info.lpParameters = "echo dooda > _dump.txt";
info.lpParameters = "type Ui.deps.json";
info.nShow = (int)NM.ShowCommands.SW_SHOW; //SW_HIDE SW_SHOW
info.fMask = (int)NM.ShellExecuteMaskFlags.SEE_MASK_NO_CONSOLE; // SEE_MASK_DEFAULT;
bool b = NM.ShellExecuteEx(ref info);
if (b == false || info.hInstApp < 32)
{
    Debug.WriteLine("!!!");
}

//If the function succeeds, it sets the hInstApp member of the ShellExecuteInfo structure to a value greater than 32.
//If the function fails, hInstApp is set to the SE_ERR_XXX error value that best indicates the cause of the failure.
//Although hInstApp is declared as an HINSTANCE for compatibility with 16 - bit Windows applications, it is not a
//true HINSTANCE. It can be cast only to an int and can be compared only to either the value 32 or the SE_ERR_XXX error codes.
//The SE_ERR_XXX error values are provided for compatibility with ShellExecute.To retrieve more accurate error information,
//use GetLastError. It may return one of the following values.

=========================================================================

#define WIN32_LEAN_AND_MEAN
#include "winmain.h"
#define UNUSED __attribute__((unused))

// no wait
int WINAPI WinMain(HINSTANCE UNUSED hInstance, HINSTANCE UNUSED hPrevInstance, LPSTR lpCmdLine, int UNUSED nCmdShow)
{
    STARTUPINFO si = {0};
    si.cb = sizeof(STARTUPINFO);
    PROCESS_INFORMATION pi = {0};
    si.dwFlags = STARTF_USESHOWWINDOW;
    si.wShowWindow = FALSE;
    BOOL bRet = CreateProcess(NULL, lpCmdLine, NULL, NULL, FALSE, CREATE_NO_WINDOW, NULL, NULL, &si, &pi);
    if (bRet)
    {
        CloseHandle(pi.hThread);
        CloseHandle(pi.hProcess);
    }
    return 0;
}


// yes wait
int WINAPI WinMain(HINSTANCE UNUSED hInstance, HINSTANCE UNUSED hPrevInstance, LPSTR lpCmdLine, int UNUSED nCmdShow)
{
    STARTUPINFO si = {0};
    si.cb = sizeof(STARTUPINFO);
    PROCESS_INFORMATION pi = {0};
    si.dwFlags = STARTF_USESHOWWINDOW;
    si.wShowWindow = FALSE;
    BOOL bRet = CreateProcess(NULL, lpCmdLine, NULL, NULL, FALSE, CREATE_NO_WINDOW, NULL, NULL, &si, &pi);
    if (bRet)
    {
        WaitForSingleObject(pi.hProcess, INFINITE);
        // Get the exit code.
        DWORD exitCode;
        int result = GetExitCodeProcess(pi.hProcess, &exitCode);
        CloseHandle(pi.hThread);
        CloseHandle(pi.hProcess);
        if (result)
        {
            return exitCode;
        }
    }
    return 0;
}





=================================================================

        void DoCmder() -- old
        {
            try
            {
                var targetDirXXX = @"C:\Dev\SplunkStuff"; // Fake from cmd line path - the rt click dir

                // Get the current explorer path. Note: could also use the %W arg.
                string? currentPath = Path.GetDirectoryName(targetDirXXX) ?? throw new InvalidOperationException($"Couldn't get path for {targetDirXXX}");

                // Locate the originator.
                var wins = SU.GetAppWindows("explorer");

                WindowInfo? currentExplorer = wins.Where(w => w.Title == currentPath).FirstOrDefault() ?? throw new InvalidOperationException($"Couldn't get originator explorer for {targetDirXXX}");

                // Create a copy of the first explorer -> left pane.
                NM.ShellExecute(Handle, "explore", currentPath, IntPtr.Zero, IntPtr.Zero, (int)NM.ShowCommands.SW_NORMAL);

                // Create the new explorer -> right pane.
                NM.ShellExecute(Handle, "explore", targetDirXXX, IntPtr.Zero, IntPtr.Zero, (int)NM.ShowCommands.SW_NORMAL);

                // Wait for new windows to be created.
                int tries = 0;
                WindowInfo? leftPane = null;
                WindowInfo? rightPane = null;
                for (tries = 0; tries < 10 && leftPane is null && rightPane is null; tries++) // ~4
                {
                    Thread.Sleep(50);

                    // Locate the two new explorer windows.
                    wins = SU.GetAppWindows("explorer");
                    foreach (var win in wins)
                    {
                        if (win.Title == currentPath && win.Handle != currentExplorer.Handle) { leftPane = win; }
                        if (win.Title == targetDirXXX) { rightPane = win; }
                    }
                }

                if (leftPane is null) throw new InvalidOperationException($"Couldn't create left pane for {currentPath}");
                if (rightPane is null) throw new InvalidOperationException($"Couldn't create right pane for {targetDirXXX}");

                _logger.Debug($"tries:{tries} currentExplorer:{currentExplorer.Handle} leftPane:{leftPane.Handle} rightPane:{rightPane.Handle}");

                // Relocate the windows to taste.  For 1920x1080 display.
                int w = 900;
                int h = 900;
                int t = 50;
                int l = 50;

                NM.MoveWindow(leftPane.Handle, l, t, w, h, true);
                NM.SetForegroundWindow(leftPane.Handle);

                NM.MoveWindow(rightPane.Handle, l + w, t, w, h, true);
                NM.SetForegroundWindow(rightPane.Handle);
            }
            catch (Exception ex)
            {
                _logger.Error(ex.Message);
            }
        }
